program ::= extern_list decl_list 
           | decl_list
extern_list ::= extern extern_list
	|   extern
extern ::= "extern" type_spec IDENT "(" params ")" ";"
decl_list ::= decl decl_list
	|   decl
decl ::= var_decl 
        |  fun_decl
var_decl ::= var_type IDENT ";" 
type_spec ::= "void"
             |  var_type           
var_type  ::= "int" |  "float" |  "bool"
fun_decl ::= type_spec IDENT "(" params ")" block
params ::= param_list  
          |  "void" | epsilon
param_list ::= param "," param_list
	|   param
param ::= var_type IDENT
block ::= "{" local_decls stmt_list "}" 
local_decls ::= local_decl local_decls
	| epsilon
local_decl ::= var_type IDENT ";"
stmt_list ::= stmt stmt_list
	| epsilon
stmt ::= expr_stmt 
        |  block 
        |  if_stmt 
        |  while_stmt 
        |  return_stmt
expr_stmt ::= expr ";" 
             |  ";"
while_stmt ::= "while" "(" expr ")" stmt 
if_stmt ::= "if" "(" expr ")" block else_stmt
else_stmt  ::= "else" block
              |  epsilon
return_stmt ::= "return" ";" 
               |  "return" expr ";"      /////////         
# operators in order of increasing precedence      
expr ::= IDENT "=" expr
        | rval  
rval ::= operator_or
operator_or ::= operator_and operator_or'
operator_or' ::= "||" operator_and operator_or'
		| epsilon
operator_and ::= operator_equal operator_and'
operator_and' ::= "&&" operator_equal operator_and'
		| epsilon
operator_equal ::= operator_comp operator_equal'
operator_equal' ::= "==" operator_comp operator_equal'
		| "!=" operator_comp operator_equal'
		| epsilon
operator_comp ::= operator_add operator_comp'
operator_comp' ::= "<" operator_add operator_comp'
		| "<=" operator_add operator_comp'
		| ">" operator_add operator_comp'
		| ">=" operator_add operator_comp'
		| epsilon
operator_add ::= operator_times operator_add'
operator_add' ::= "+" operator_times operator_add'
		| "-" operator_times operator_add'
		| epsilon
operator_times ::= rval' operator_times'
operator_times' ::= "*" rval' operator_times'
		| "/" rval' operator_times'
		| "%" rval' operator_times'
		| epsilon
rval' ::= "-" rval' | "!" rval'
        | "(" expr ")"
        | IDENT | IDENT "(" args ")"
        | INT_LIT | FLOAT_LIT | BOOL_LIT
args ::= arg_list 
        |  epsilon
arg_list ::= expr "," arg_list
	|   expr
